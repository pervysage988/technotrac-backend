"""init schema

Revision ID: 4d2dd8aa3428
Revises: 
Create Date: 2025-08-31 11:06:58.841885

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '4d2dd8aa3428'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('misc',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('key', sa.String(), nullable=True),
    sa.Column('value', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('key')
    )
    op.create_table('users',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('phone_e164', sa.String(), nullable=False),
    sa.Column('role', sa.Enum('FARMER', 'OWNER', 'ADMIN', name='userrole'), nullable=False),
    sa.Column('display_name', sa.String(), nullable=True),
    sa.Column('language', sa.String(), nullable=True),
    sa.Column('rating_avg', sa.Numeric(precision=2, scale=1), nullable=True),
    sa.Column('rating_count', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_users_phone_e164', 'users', ['phone_e164'], unique=False)
    op.create_index(op.f('ix_users_role'), 'users', ['role'], unique=False)
    op.create_table('admins',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('user_id')
    )
    op.create_table('audit_logs',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('actor_user_id', sa.UUID(), nullable=True),
    sa.Column('action', sa.String(), nullable=True),
    sa.Column('entity', sa.String(), nullable=True),
    sa.Column('entity_id', sa.UUID(), nullable=True),
    sa.Column('payload', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['actor_user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('equipment',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('owner_id', sa.UUID(), nullable=False),
    sa.Column('type', sa.Enum('TRACTOR', 'HARVESTER', 'SPRAYER', 'ROTAVATOR', 'PLOUGH', 'OTHER', name='equipmenttype'), nullable=False),
    sa.Column('brand', sa.String(), nullable=True),
    sa.Column('model', sa.String(), nullable=True),
    sa.Column('daily_rate', sa.Integer(), nullable=False),
    sa.Column('hourly_rate', sa.Integer(), nullable=True),
    sa.Column('operator_included', sa.Boolean(), nullable=True),
    sa.Column('lat', sa.Float(), nullable=True),
    sa.Column('lon', sa.Float(), nullable=True),
    sa.Column('status', sa.Enum('DRAFT', 'PENDING_REVIEW', 'APPROVED', 'REJECTED', 'BLOCKED', name='equipmentstatus'), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_equipment_operator_included'), 'equipment', ['operator_included'], unique=False)
    op.create_index(op.f('ix_equipment_owner_id'), 'equipment', ['owner_id'], unique=False)
    op.create_index(op.f('ix_equipment_status'), 'equipment', ['status'], unique=False)
    op.create_index(op.f('ix_equipment_type'), 'equipment', ['type'], unique=False)
    op.create_table('farmer_profiles',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('village', sa.Text(), nullable=True),
    sa.Column('pincode', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('user_id')
    )
    op.create_index(op.f('ix_farmer_profiles_pincode'), 'farmer_profiles', ['pincode'], unique=False)
    op.create_table('owner_profiles',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('upi_id', sa.String(), nullable=True),
    sa.Column('kyc_status', sa.Enum('UNVERIFIED', 'PENDING', 'VERIFIED', name='kycstatus'), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('user_id')
    )
    op.create_table('availabilities',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('equipment_id', sa.UUID(), nullable=False),
    sa.Column('owner_id', sa.UUID(), nullable=False),
    sa.Column('start_time', sa.DateTime(), nullable=False),
    sa.Column('end_time', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['equipment_id'], ['equipment.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_availabilities_id'), 'availabilities', ['id'], unique=False)
    op.create_table('bookings',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('equipment_id', sa.UUID(), nullable=False),
    sa.Column('renter_id', sa.UUID(), nullable=False),
    sa.Column('start_ts', sa.DateTime(timezone=True), nullable=False),
    sa.Column('end_ts', sa.DateTime(timezone=True), nullable=False),
    sa.Column('status', sa.Enum('PENDING', 'ACCEPTED', 'REJECTED', 'CANCELLED', 'COMPLETED', 'EXPIRED', name='bookingstatus'), nullable=True),
    sa.Column('price_total', sa.Integer(), nullable=True),
    sa.Column('commission_fee', sa.Integer(), nullable=True),
    sa.Column('owner_payout', sa.Integer(), nullable=True),
    sa.Column('payment_method', sa.Enum('CASH', 'UPI', 'WALLET', name='paymentmethod'), nullable=True),
    sa.Column('payment_status', sa.Enum('NONE', 'PENDING', 'PAID', 'FAILED', 'REFUNDED', name='paymentstatus'), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['equipment_id'], ['equipment.id'], ),
    sa.ForeignKeyConstraint(['renter_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_bookings_equipment_id'), 'bookings', ['equipment_id'], unique=False)
    op.create_index(op.f('ix_bookings_renter_id'), 'bookings', ['renter_id'], unique=False)
    op.create_index(op.f('ix_bookings_status'), 'bookings', ['status'], unique=False)
    op.create_table('equipment_photos',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('equipment_id', sa.UUID(), nullable=False),
    sa.Column('url', sa.String(), nullable=True),
    sa.Column('position', sa.SmallInteger(), nullable=True),
    sa.ForeignKeyConstraint(['equipment_id'], ['equipment.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_equipment_photos_equipment_id'), 'equipment_photos', ['equipment_id'], unique=False)
    op.create_table('ratings',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('booking_id', sa.UUID(), nullable=True),
    sa.Column('by_user_id', sa.UUID(), nullable=True),
    sa.Column('for_user_id', sa.UUID(), nullable=True),
    sa.Column('stars', sa.Integer(), nullable=False),
    sa.Column('comment', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['booking_id'], ['bookings.id'], ),
    sa.ForeignKeyConstraint(['by_user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['for_user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('booking_id')
    )
    op.create_index(op.f('ix_ratings_for_user_id'), 'ratings', ['for_user_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_ratings_for_user_id'), table_name='ratings')
    op.drop_table('ratings')
    op.drop_index(op.f('ix_equipment_photos_equipment_id'), table_name='equipment_photos')
    op.drop_table('equipment_photos')
    op.drop_index(op.f('ix_bookings_status'), table_name='bookings')
    op.drop_index(op.f('ix_bookings_renter_id'), table_name='bookings')
    op.drop_index(op.f('ix_bookings_equipment_id'), table_name='bookings')
    op.drop_table('bookings')
    op.drop_index(op.f('ix_availabilities_id'), table_name='availabilities')
    op.drop_table('availabilities')
    op.drop_table('owner_profiles')
    op.drop_index(op.f('ix_farmer_profiles_pincode'), table_name='farmer_profiles')
    op.drop_table('farmer_profiles')
    op.drop_index(op.f('ix_equipment_type'), table_name='equipment')
    op.drop_index(op.f('ix_equipment_status'), table_name='equipment')
    op.drop_index(op.f('ix_equipment_owner_id'), table_name='equipment')
    op.drop_index(op.f('ix_equipment_operator_included'), table_name='equipment')
    op.drop_table('equipment')
    op.drop_table('audit_logs')
    op.drop_table('admins')
    op.drop_index(op.f('ix_users_role'), table_name='users')
    op.drop_index('ix_users_phone_e164', table_name='users')
    op.drop_table('users')
    op.drop_table('misc')
    # ### end Alembic commands ###
